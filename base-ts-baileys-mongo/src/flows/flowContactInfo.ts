import { addKeyword } from '@builderbot/bot';
import { MongoAdapter as Database } from '@builderbot/database-mongo';
import { BaileysProvider as Provider } from '@builderbot/provider-baileys';

import {
    deactivateBot,
} from '../index';

const flowContactInfo = addKeyword<Provider, Database>(['contacto', 'informacion de contacto'])
    .addAnswer('Â¡Hola! ğŸ˜Š Si necesitas contactarnos, puedes llamarnos al nÃºmero 81 1481 8453', { capture: false })
    .addAnswer('TambiÃ©n puedes enviarnos un correo electrÃ³nico a bone.automotriz@gmail.com.', { capture: false })
    .addAnswer('Si prefieres hablar con uno de nuestros agentes por este medio, escribe la palabra "agente".', { capture: false })
    .addAnswer('Â¿Hay algo mÃ¡s en lo que te pueda ayudar hoy?', { capture: true }, async (ctx, { fallBack, flowDynamic, gotoFlow }) => {
        const response = ctx.body.trim().toLowerCase();
        
        if (response.includes('sÃ­') || response.includes('si')) {
            await flowDynamic('Â¡Perfecto! Por favor, dime en quÃ© mÃ¡s puedo ayudarte.');
            // AquÃ­ podrÃ­as redirigir a otro flujo segÃºn la necesidad del usuario
        } else if (response.includes('no')) {
            await flowDynamic('Gracias por tu consulta. Â¡Que tengas un excelente dÃ­a! ğŸ˜Š');
        } else if (response.includes('agente')) {
            await flowDynamic('Â¡Perfecto! Un agente se pondrÃ¡ en contacto contigo muy pronto para seguir con el proceso de cotizaciÃ³n. Gracias por tu paciencia. ğŸ˜Š');
            return gotoFlow(deactivateBot);
        } else {
            return fallBack('No entendÃ­ tu respuesta, por favor dime "sÃ­" si necesitas mÃ¡s informaciÃ³n, "no" si eso es todo, o "agente" si prefieres hablar con uno de nuestros agentes.');
        }
    });

export default flowContactInfo;

