import { MemoryDB, addKeyword } from '@builderbot/bot';
import { MongoAdapter as Database, MongoAdapter } from '@builderbot/database-mongo'
import { BaileysProvider as Provider } from '@builderbot/provider-baileys'
import { join } from 'path'
import flowDescribeProblem from './flowDescribeProblem';



const normalizeInput = (input: string) => {
    return input.trim().toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
};

const flowNewCar = addKeyword<Provider, Database>(['coche', 'auto', 'veh√≠culo'])
    .addAnswer('¬°Hola! Vamos a registrar tu coche. üòä', { capture: false })
    .addAnswer('Si no sabes alguna respuesta, puedes escribir "no s√©".', { capture: false })
    .addAnswer('Primero, ¬øCu√°l es la *marca* del coche?', { capture: true }, async (ctx, { state, fallBack,flowDynamic }) => {
        const brand = normalizeInput(ctx.body);
        if (['no s√©', 'nose', 'n/a'].includes(brand)) {
            await state.update({ brand: null });
        } else {
            await state.update({ brand: ctx.body.trim() });
        }
    })
    .addAnswer('¬øY el *modelo* del coche?', { capture: true }, async (ctx, { state, fallBack }) => {
        const model = normalizeInput(ctx.body);
        if (['no s√©', 'nose', 'n/a'].includes(model)) {
            await state.update({ model: null });
        } else {
            await state.update({ model: ctx.body.trim() });
        }
    })
    .addAnswer('¬øCu√°l es el *kilometraje* del coche? (n√∫mero de kil√≥metros recorridos)', { capture: true }, async (ctx, { state, fallBack }) => {
        const mileageInput = ctx.body.trim();
        const normalizedMileage = normalizeInput(mileageInput);

        if (['no s√©', 'nose', 'n/a'].includes(normalizedMileage)) {
            await state.update({ mileage: null });
        } else {
            const mileageNumber = parseInt(mileageInput, 10);
            if (!isNaN(mileageNumber) && mileageNumber >= 0) {
                await state.update({ mileage: mileageNumber });
            } else {
                return fallBack('Por favor, ingresa un *n√∫mero v√°lido* para el kilometraje del coche.');
            }
        }
    })
    .addAnswer('¬øCu√°l es el *a√±o* del coche?', { capture: true }, async (ctx, { state, fallBack }) => {
        const yearString = normalizeInput(ctx.body);
        if (['no s√©', 'nose', 'n/a'].includes(yearString)) {
            await state.update({ year: null });
        } else {
            const year = parseInt(ctx.body.trim(), 10);
            const currentYear = new Date().getFullYear();
            if (!isNaN(year) && year >= 1900 && year <= currentYear) {
                await state.update({ year });
            } else {
                return fallBack(`Por favor, ingresa un *a√±o v√°lido* (entre 1900 y ${currentYear}).`);
            }
        }
    })
    .addAnswer('Finalmente, ¬øcu√°l es el *n√∫mero de serie* del coche? (VIN)', { capture: true, media: join(process.cwd(), 'assets', 'vin.jpg') }, async (ctx, { state, fallBack, flowDynamic }) => {
        const serialNumber = normalizeInput(ctx.body);
        if (['no s√©', 'nose', 'n/a'].includes(serialNumber)) {
            await state.update({ serialNumber: null })
        } else {
            const serialNumber = ctx.body.trim();
            if (ctx.body.trim().length === 17) {
                await state.update({ serialNumber });
            } else {
                return fallBack('El **VIN** debe tener 17 caracteres alfanum√©ricos sin espacios. Encu√©ntralo en la placa del VIN ubicada en el tablero del lado del conductor, debajo del parabrisas, en la etiqueta de la puerta del conductor o en los documentos del veh√≠culo como el t√≠tulo o el seguro.');
            }
        }
    })
    .addAction(async (_, { state, flowDynamic }) => {
        const serialNumber = state.get('serialNumber');
        if (serialNumber == null) {
            const message = 'Entendido, es importante tener el VIN para un registro preciso del veh√≠culo. Si encuentras esta informaci√≥n m√°s tarde, ser√≠a √∫til actualizarla. Tener el VIN ayuda a obtener informaci√≥n detallada del coche como modelo, tipo de motor, marca, fecha de fabricaci√≥n, entre otras, lo que facilita una cotizaci√≥n m√°s f√°cil y detallada.'
            await flowDynamic(message);
        }
    })
    .addAnswer('Gracias por la informaci√≥n. Aqu√≠ est√° un resumen:', { capture: false }, async (ctx, { flowDynamic, state }) => {
        const brand = state.get('brand');
        const model = state.get('model');
        const mileage = state.get('mileage');
        const year = state.get('year');
        const serialNumber = state.get('serialNumber');
        
        const confirmationMessage = `Marca: ${brand !== null ? brand : 'No especificado'}\nModelo: ${model !== null ? model : 'No especificado'}\nKilometraje: ${mileage !== null ? mileage : 'No especificado'}\nA√±o: ${year !== null ? year : 'No especificado'}\nN√∫mero de Serie: ${serialNumber !== null ? serialNumber : 'No especificado'}`;
        await flowDynamic(confirmationMessage);
    })
    .addAnswer('¬øEs correcta esta informaci√≥n? Responde con "s√≠" o "no".', { capture: true }, async (ctx, { flowDynamic, gotoFlow, state, fallBack, database }) => {
        const response = ctx.body.trim().toLowerCase();

        if (['s√≠', 'si'].includes(response)) {
            await flowDynamic('¬°Perfecto! La informaci√≥n ha sido guardada correctamente. Gracias. üòä');
            

             // Guardar la informaci√≥n en la base de datos
        const userData = {
            phone: ctx.from, // N√∫mero de tel√©fono del usuario
            brand: state.get('brand'),
            model: state.get('model'),
            mileage: state.get('mileage'),
            year: state.get('year'),
            serialNumber: state.get('serialNumber'),
        };

        await database.db.collection('users').insertOne(userData);
            // TODO: Enviar al flujo de que quiere hacer

            return gotoFlow(flowDescribeProblem);

        } else if (['no', 'n√≥'].includes(response)) {
            await flowDynamic('Entiendo, vamos a ingresar la informaci√≥n nuevamente.');
            return gotoFlow(flowNewCar);
        } else {
            return fallBack('Por favor, responde con "s√≠" si la informaci√≥n es correcta o "no" si deseas corregirla.');
        }
    });

export default flowNewCar;
